{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $ArrayPrototype = GetIntrinsic('%Array.prototype%');\nvar $RangeError = GetIntrinsic('%RangeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\n\nvar MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1;\nvar $setProto = GetIntrinsic('%Object.setPrototypeOf%', true) || ( // eslint-disable-next-line no-proto, no-negated-condition\n[].__proto__ !== $ArrayPrototype ? null : function (O, proto) {\n  O.__proto__ = proto; // eslint-disable-line no-proto, no-param-reassign\n\n  return O;\n}); // https://www.ecma-international.org/ecma-262/12.0/#sec-arraycreate\n\nmodule.exports = function ArrayCreate(length) {\n  if (!IsIntegralNumber(length) || length < 0) {\n    throw new $TypeError('Assertion failed: `length` must be an integer Number >= 0');\n  }\n\n  if (length > MAX_ARRAY_LENGTH) {\n    throw new $RangeError('length is greater than (2**32 - 1)');\n  }\n\n  var proto = arguments.length > 1 ? arguments[1] : $ArrayPrototype;\n  var A = []; // steps 3, 5\n\n  if (proto !== $ArrayPrototype) {\n    // step 4\n    if (!$setProto) {\n      throw new $SyntaxError('ArrayCreate: a `proto` argument that is not `Array.prototype` is not supported in an environment that does not support setting the [[Prototype]]');\n    }\n\n    $setProto(A, proto);\n  }\n\n  if (length !== 0) {\n    // bypasses the need for step 6\n    A.length = length;\n  }\n  /* step 6, the above as a shortcut for the below\n     OrdinaryDefineOwnProperty(A, 'length', {\n         '[[Configurable]]': false,\n         '[[Enumerable]]': false,\n         '[[Value]]': length,\n         '[[Writable]]': true\n     });\n     */\n\n\n  return A;\n};","map":{"version":3,"sources":["C:/Users/OLUWAKEMI/Desktop/budget/node_modules/es-abstract/2021/ArrayCreate.js"],"names":["GetIntrinsic","require","$ArrayPrototype","$RangeError","$SyntaxError","$TypeError","IsIntegralNumber","MAX_ARRAY_LENGTH","Math","pow","$setProto","__proto__","O","proto","module","exports","ArrayCreate","length","arguments","A"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,eAAe,GAAGF,YAAY,CAAC,mBAAD,CAAlC;AACA,IAAIG,WAAW,GAAGH,YAAY,CAAC,cAAD,CAA9B;AACA,IAAII,YAAY,GAAGJ,YAAY,CAAC,eAAD,CAA/B;AACA,IAAIK,UAAU,GAAGL,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIM,gBAAgB,GAAGL,OAAO,CAAC,oBAAD,CAA9B;;AAEA,IAAIM,gBAAgB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAzC;AAEA,IAAIC,SAAS,GAAGV,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,MACf;AACA,GAAGW,SAAH,KAAiBT,eAAjB,GACG,IADH,GAEG,UAAUU,CAAV,EAAaC,KAAb,EAAoB;AACrBD,EAAAA,CAAC,CAACD,SAAF,GAAcE,KAAd,CADqB,CACA;;AACrB,SAAOD,CAAP;AACA,CAPa,CAAhB,C,CAUA;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC7C,MAAI,CAACX,gBAAgB,CAACW,MAAD,CAAjB,IAA6BA,MAAM,GAAG,CAA1C,EAA6C;AAC5C,UAAM,IAAIZ,UAAJ,CAAe,2DAAf,CAAN;AACA;;AACD,MAAIY,MAAM,GAAGV,gBAAb,EAA+B;AAC9B,UAAM,IAAIJ,WAAJ,CAAgB,oCAAhB,CAAN;AACA;;AACD,MAAIU,KAAK,GAAGK,SAAS,CAACD,MAAV,GAAmB,CAAnB,GAAuBC,SAAS,CAAC,CAAD,CAAhC,GAAsChB,eAAlD;AACA,MAAIiB,CAAC,GAAG,EAAR,CAR6C,CAQjC;;AACZ,MAAIN,KAAK,KAAKX,eAAd,EAA+B;AAAE;AAChC,QAAI,CAACQ,SAAL,EAAgB;AACf,YAAM,IAAIN,YAAJ,CAAiB,kJAAjB,CAAN;AACA;;AACDM,IAAAA,SAAS,CAACS,CAAD,EAAIN,KAAJ,CAAT;AACA;;AACD,MAAII,MAAM,KAAK,CAAf,EAAkB;AAAE;AACnBE,IAAAA,CAAC,CAACF,MAAF,GAAWA,MAAX;AACA;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,SAAOE,CAAP;AACA,CA3BD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $ArrayPrototype = GetIntrinsic('%Array.prototype%');\nvar $RangeError = GetIntrinsic('%RangeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\n\nvar MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1;\n\nvar $setProto = GetIntrinsic('%Object.setPrototypeOf%', true) || (\n\t// eslint-disable-next-line no-proto, no-negated-condition\n\t[].__proto__ !== $ArrayPrototype\n\t\t? null\n\t\t: function (O, proto) {\n\t\t\tO.__proto__ = proto; // eslint-disable-line no-proto, no-param-reassign\n\t\t\treturn O;\n\t\t}\n);\n\n// https://www.ecma-international.org/ecma-262/12.0/#sec-arraycreate\n\nmodule.exports = function ArrayCreate(length) {\n\tif (!IsIntegralNumber(length) || length < 0) {\n\t\tthrow new $TypeError('Assertion failed: `length` must be an integer Number >= 0');\n\t}\n\tif (length > MAX_ARRAY_LENGTH) {\n\t\tthrow new $RangeError('length is greater than (2**32 - 1)');\n\t}\n\tvar proto = arguments.length > 1 ? arguments[1] : $ArrayPrototype;\n\tvar A = []; // steps 3, 5\n\tif (proto !== $ArrayPrototype) { // step 4\n\t\tif (!$setProto) {\n\t\t\tthrow new $SyntaxError('ArrayCreate: a `proto` argument that is not `Array.prototype` is not supported in an environment that does not support setting the [[Prototype]]');\n\t\t}\n\t\t$setProto(A, proto);\n\t}\n\tif (length !== 0) { // bypasses the need for step 6\n\t\tA.length = length;\n\t}\n\t/* step 6, the above as a shortcut for the below\n    OrdinaryDefineOwnProperty(A, 'length', {\n        '[[Configurable]]': false,\n        '[[Enumerable]]': false,\n        '[[Value]]': length,\n        '[[Writable]]': true\n    });\n    */\n\treturn A;\n};\n"]},"metadata":{},"sourceType":"script"}